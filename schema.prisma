// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  password       String
  role           UserRole       @default(USER)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  lastLoginAt    DateTime?
  ApiKeys        ApiKey[]
  userActivities UserActivity[]
  Subscriptions  Subscription[]
  Log            Log[]
}

model ApiKey {
  id         String       @id @default(uuid())
  key        String       @unique
  userId     String
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime     @default(now())
  APIRequest APIRequest[]
}

model UserActivity {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action    String
  module    String
  createdAt DateTime @default(now())
}

model Subscription {
  id         String             @id @default(uuid())
  userId     String
  plan       Plan               @default(FREE)
  status     SubscriptionStatus @default(ACTIVE)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  validUntil DateTime
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Module {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  features    Feature[]
}

model Feature {
  id          String      @id @default(uuid())
  moduleId    String
  name        String
  description String
  enabled     Boolean     @default(true)
  module      Module      @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  Analytics   Analytics[]
}

model Log {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  activity  String
  details   Json?
  createdAt DateTime @default(now())
}

model APIRequest {
  id           String   @id @default(uuid())
  apiKeyId     String
  apiKey       ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  endpoint     String
  requestBody  Json?
  responseBody Json?
  createdAt    DateTime @default(now())
}

model Analytics {
  id        String   @id @default(uuid())
  featureId String
  feature   Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)
  metrics   Json
  day       DateTime @updatedAt
}

enum UserRole {
  ADMIN
  DEVELOPER
  USER
  GUEST
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}

enum Plan {
  FREE
  BASIC
  PREMIUM
}

